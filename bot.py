import asyncio
import sys
from config import TOKEN
from handlers.start_handler import start_conversation
from telegram.ext import ApplicationBuilder

# ‚úÖ Windows —Ñ–∏–∫—Å: ProactorEventLoop
if sys.platform == "win32":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.set_event_loop(asyncio.ProactorEventLoop())

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(start_conversation)  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ")
    
    try:
        await app.run_polling()
    except asyncio.CancelledError:
        print("Polling –∑–∞–≤–µ—Ä—à—ë–Ω (–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω)")
    except Exception as e:
        if "Cannot close a running event loop" in str(e):
            pass
        else:
            print(f"‚ö† –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except RuntimeError as e:
        if "Cannot close a running event loop" in str(e):
            pass