import asyncio
import sys
from config import TOKEN
from handlers.start_handler import start
from handlers.article_handler import send_first_article
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters

# ‚úÖ Windows —Ñ–∏–∫—Å: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞—ë–º ProactorEventLoop
if sys.platform == "win32":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.set_event_loop(asyncio.ProactorEventLoop())

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))  
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, send_first_article))  

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ")

    try:
        await app.run_polling()
    except asyncio.CancelledError:
        print("Polling –∑–∞–≤–µ—Ä—à—ë–Ω (–±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω)")
    except Exception as e:
        if "Cannot close a running event loop" in str(e):
            pass  # ‚úÖ –ì–ª—É—à–∏–º –æ—à–∏–±–∫—É —Ä–∞–∑ –∏ –Ω–∞–≤—Å–µ–≥–¥–∞
        else:
            print(f"‚ö† –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {e}")

# ‚úÖ –ó–∞–ø—É—Å–∫ –∏ –ø–æ–ª–Ω–æ–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ event loop
if __name__ == "__main__":
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    except RuntimeError as e:
        if "Cannot close a running event loop" in str(e):
            pass  # ‚úÖ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–∞–≥ Windows